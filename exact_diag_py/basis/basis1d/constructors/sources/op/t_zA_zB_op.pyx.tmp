

cdef {c_matrix_type} {type_code}_MatrixElement_ZA_ZB(int L,int zAblock,int zBblock, int kblock, int a, int l, {c_float_type} k, int gA, int gB,NP_INT8_t Nr,NP_INT8_t Nc,NP_INT16_t mr,NP_INT16_t mc):
	cdef {c_float_type} nr,nc
	cdef {c_matrix_type} ME
	cdef NP_INT16_t mmr,cr,mmc,cc


	mmc = mc % (L+1)
	cc = mc/(L+1)

	mmr = mr % (L+1)
	cr = mr/(L+1)

	nr = 1.0
	nc = 1.0


	if cr == 1:
		nr = 1.0/Nr
	elif cr == 2:
		nr = (1.0 + zAblock*cos(k*mmr) )/Nr
	elif cr == 3:
		nr = (1.0 + zBblock*cos(k*mmr) )/Nr
	elif cr == 4:
		nr = (1.0 + zAblock*zBblock*cos(k*mmr) )/Nr	
	

	if cc == 1:
		nc = 1.0/Nc
	elif cc == 2:
		nc = (1.0 + zAblock*cos(k*mmc) )/Nc
	elif cc == 3:
		nc = (1.0 + zBblock*cos(k*mmc) )/Nc
	elif cc == 4:
		nc = (1.0 + zAblock*zBblock*cos(k*mmc) )/Nc	
	

	ME=sqrt(nc/nr)*(zAblock**gA)*(zBblock**gB)


	if {check_imag}:
		ME *= (-1)**(2*l*a*kblock/L)
	else:
		ME *= (cos(k*l) - 1.0j * sin(k*l))

	return ME



def {type_code}_t_zA_zB_op(_np.ndarray[NP_INT8_t,ndim=1] N,_np.ndarray[NP_INT16_t,ndim=1] m, _np.ndarray[{np_basis_type}_t,ndim=1] basis, str opstr, _np.ndarray[NP_INT32_t,ndim=1] indx, int L, int zAblock, int zBblock, int kblock, int a):
	cdef {c_basis_type} s
	cdef int error,ss,i,Ns,l,gA,gB
	cdef _np.ndarray[{np_basis_type}_t,ndim = 1] R = _np.zeros(3,{np_basis_type})
	cdef _np.ndarray[NP_INT32_t,ndim=1] col
	cdef _np.ndarray[{c_matrix_type},ndim=1] ME
	cdef {c_float_type} k = (2.0*_np.pi*kblock*a)/L


	Ns = basis.shape[0]
	col,ME,error = {type_code}_spinop(basis,opstr,indx)

	if {check_imag} and (2*kblock*a % L) != 0:
		error = -1

	if error != 0:
		return col,ME,error

	for i in range(Ns):
		s = col[i]
		RefState_T_ZA_ZB(s,L,a,R)

		s = R[0]
		l = R[1]
		gA = R[2]
		gB = R[3]

		ss = findzstate(basis,Ns,s)
		col[i] = ss
		if ss == -1: continue

		ME[i] *= {type_code}_MatrixElement_ZA_ZB(L,zAblock,zBblock,kblock,a,l,k,gA,gB,N[i],N[ss],m[i],m[ss])
		

	return col,ME,error







