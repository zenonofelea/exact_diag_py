!program test
!integer(kind=4) :: i
!i=3
!call flip_lr(i,3)
!print*, i
!end program




subroutine flip_lr(s,L)
implicit none
integer(kind=4), intent(inout) :: s
integer(kind=4), intent(in) :: L
integer(kind=4) :: upper, lower, s1, i
lower = 0
upper = L


s1=0
do i=0,L-1
if(btest(s,i)) then
s1=s1+ishft(1,L-1-i)
end if
end do
s=s1


end subroutine





subroutine flip_all(s,L)
implicit none
integer(kind=4), intent(inout) :: s
integer(kind=4), intent(in) :: L
integer(kind=4) :: s1

s1 = ishft(1,L)-1
s=iand(not(s),s1)
end subroutine 












subroutine flip_lr_64(s,L)
implicit none
integer(kind=8), intent(inout) :: s
integer(kind=4), intent(in) :: L
integer(kind=8) :: s1, i

s1=0
do i=0,L-1
if(btest(s,i)) then
s1=s1+ishft(1_8,L-1-i)
end if
end do
i = ishft(1_8,L)-1
s=iand(s1,i)


end subroutine





subroutine flip_all_64(s,L)
implicit none
integer(kind=8), intent(inout) :: s
integer(kind=4), intent(in) :: L
integer(kind=8) :: s1

s1 = ishft(1_8,L)-1
s=iand(not(s),s1)
end subroutine 





